{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","About","props","console","log","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"oXA+CeA,MA1Cf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,qBAAKC,UAAU,QAAf,SACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,gBACTC,MAAO,CACLP,OACAD,QACAE,UACAC,SACAC,WARN,UAYE,qBAAKK,IAAKN,EAAQO,IAAKV,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,gBAAd,SACGD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBR,UAAU,gBAA1B,SACGO,GADMC,QAKb,oBAAGR,UAAU,iBAAb,UAA+BH,EAAQY,MAAM,EAAG,KAAhD,kBCoBSC,G,kNA7CfP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,uDAUZ,WACEQ,KAAKN,c,oBAEP,WACI,MAA8BM,KAAKhB,MAA3BQ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACE,yBAASZ,UAAU,YAAnB,SACGW,EACC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGY,EAAON,KAAI,SAAAc,GAAK,OACf,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZD,MAAOyB,EAAMzB,MACbE,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,QANTqB,EAAMC,e,GA9BZE,IAAMC,Y,MCQVC,MAVf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEV,sBAAK1B,UAAU,mBAAf,UACE,sDACA,yK,MCKS6B,MATf,WACI,OACI,sBAAK7B,UAAW,MAAhB,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uBCuBG6B,G,mLA3Bb,WACE,MAA8BX,KAAKO,MAA3BK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aACKC,IAAnBF,EAAS5B,OACX6B,EAAQE,KAAK,O,oBAGjB,WACE,IAAQH,EAAaZ,KAAKO,MAAlBK,SACR,OAAIA,EAAS5B,MAGD,qBAAKH,UAAU,oBAAf,SAEE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,eAAd,SAA8B+B,EAAS5B,MAAMR,QAC7C,oBAAIK,UAAU,cAAd,SAA6B+B,EAAS5B,MAAMP,OAC5C,mBAAGI,UAAU,iBAAb,SAA+B+B,EAAS5B,MAAMN,eAOrD,S,GAxBQ0B,IAAMC,YCgBZW,MAXf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,cAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWb,IAChC,cAAC,IAAD,CAAOW,KAAK,gBAAgBE,UAAWR,QCV7CS,IAASC,OACL,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.541b3a28.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\nimport { Link } from 'react-router-dom';\n\nfunction Movie({ title, year, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <Link\n        to={{\n          pathname: `/movie-detail`,\n          state: {\n            year,\n            title,\n            summary,\n            poster,\n            genres\n          },\n        }}\n      >\n        <img src={poster} alt={title} title={title} />\n        <div className=\"movie__data\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"movie__genres\">\n            {genres.map((genre, index) => (\n              <li key={index} className=\"genres__genre\">\n                {genre}\n              </li>\n            ))}\n          </ul>\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n        </div>\n      </Link>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;\n\n// id, year, title, summary, poster, genres <- props \n//function component의 인자로 props 말고 props의 특정 값만 가져올 때는 꼭 curly bracket으로 감싸야함\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n    state = {\n      isLoading: true,\n      movies: []\n    };\n    getMovies = async () => {\n      const {\n        data: {\n          data: { movies }\n        }\n      } = await axios.get(\n        \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n      );\n      this.setState({ movies, isLoading: false });\n    };\n    componentDidMount() {\n      this.getMovies();\n    }\n    render() {\n        const { isLoading, movies } = this.state;\n        return (\n          <section className=\"container\">\n            {isLoading ? (\n              <div className=\"loader\">\n                <span className=\"loader__text\">Loading...</span>\n              </div>\n            ) : (\n              <div className=\"movies\">\n                {movies.map(movie => (\n                  <Movie\n                    key={movie.id}\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres}\n                  />\n                ))}\n              </div>\n            )}\n          </section>\n        );\n      }\n    }\n    \n    export default Home;\n\n  //await: axios가 끝날 때 까지 기다렸다가 계속\n\n  // setTimeout( () => {\n  //   this.setState({ isLoading: false});\n  // }, 6000);\n  // fetch위에 있는 작은 layer\n  //데이터를 잡기 위해\n\n  //this will happen after 6 seconds\n  //이론적으로 componentDidMount에서 data를 fetch 함\n  //axios.get는 시간이 오래 걸릴 수 있으므로 javasscript에게 componentDidMount함수가 끝날 때 까지\n  //약간 시간이 걸릴 수 있다고 말해야 함.\n\n  \n// const foodILike = [\n//   {\n//     id:1,\n//     name: \"Kimchi\",\n//     image:\n//       \"https://kstory365.files.wordpress.com/2015/01/kimchi-01-cabbage.jpg\",\n//     rating: 3\n//   },\n//   {\n//     id:2,\n//     name: \"bulgogi\",\n//       image:\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/%ED%8C%8C%EB%B6%88%EA%B3%A0%EA%B8%B0.JPG/1024px-%ED%8C%8C%EB%B6%88%EA%B3%A0%EA%B8%B0.JPG\",\n//     rating: 4\n//     },\n//   {\n//     id:3,\n//     name: \"kimbap\",\n//     image:\n//       \"https://recipe1.ezmember.co.kr/cache/recipe/2016/06/29/e7401296033ab8e4297cd53d71e1bba91.jpg\",\n//     rating: 4.9\n//     },\n//   {\n//     id:4,\n//     name: \"samgyetang\",\n//     image:\n//       \"https://img.seoul.co.kr//img/upload/2019/07/25/SSI_20190725184016.jpg\",\n//     rating: 4.8\n//     },\n// ];\n\n// function renderFood(dish){\n//   console.log(dish);\n//   return <Food name = {dish.name} picture={dish.image} />\n// }\n\n// function Food({ name, picture, rating }) {\n//   //console.log(props.fav);\n//   return (\n//     <div>\n//       <h2>I like {name} </h2>\n//       <h4>{rating}/5.0</h4>\n//       <img src={picture} alt={name} />\n//     </div>\n//   );\n// }\n\n// Food.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number,\n// };\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     console.log(\"hello\");\n//   }\n//   state = {\n//     count: 0,\n//   };\n\n//   add = () => {\n//     //console.log(\"add\");\n//     this.setState(current => ({count: current.count + 1}));\n//   };\n\n//   minus = () => {\n//     // console.log(\"minus\");\n//     this.setState(current => ({count: current.count - 1}));\n//   };\n\n//   componentDidMount(){\n//     console.log(\"component rendered\");\n//   }\n\n//   componentDidUpdate() {\n//     console.log(\"I just updated\");\n//   }\n\n//   // componentWillMount(){\n//   //   console.log(\"Goodbye, cruel world\")''\n//   // }\n\n//   render() {\n//     console.log(\"Im rendering\");\n//     return (\n//       <div>\n//         <h1> The number is: {this.state.count}</h1>\n//         <button onClick={this.add}>Add</button>\n//         <button onClick={this.minus}>minus</button>\n//       </div>\n//     );\n//   }\n// }\n//react는 자동적으로 너의 class component의 render method를 실행해! 자동으로!\n//class component는 우리가 원하는 state라는 녀석을 가지고 있음 \\\n//state는 object이고 component의 data를 넣을 공간이 있고, 이 데이터는 변함\n//this.add() -> 즉시, this.add -> 클릭 할 때만\n//setState를 사용하지 않으면 새 state와 함께 render function이 호출되지 않을 거야\n//매 순간 너가 setState를 호출할 때 마다 react는 새로운 state와 함께 render function을 호출할 꺼야\n\n// function App() {\n//   return (\n//     <div>\n//       {foodILike.map(dish =>(\n//         <Food key = {dish.id} name = {dish.name} picture={dish.image} rating={dish.rating} />\n//       ))}\n//       {/* map은 여기서 뭐가 돌아오든 array로 돌려줌 */}\n//       {/* <h1>Hello!</h1> */}\n//       {/* {foodILike.map(dish => <Food name = {dish.name} picture = {dish.image}/>)} */}\n//       {/* <Food fav=\"kimchi\" />\n//       <Food fav=\"ramen\" />\n//       <Food fav=\"meat\" /> */}\n//       {/* html의  <div class= \"hello\"> </div> 와 유사*/}\n//       {/* food component에 fav라는 이름의 property를 kimchu라는 value로 줌  */}\n//     </div>\n//   );\n// }\n//react는 당신이 거기에 쓰는 모든 요소를 생성함!\n//자바스크립트와 함께 그것들을 만들고\n//그것들을 html로 만듬\n//너의 모든 react application을 div 사이에 넣어! ok?\n//react는 소스코드에 처음부터 html를 넣지않고, html에서 html을 추가하거나 제거하는 법을 알고 잇음\n//그래서 application이 이것을 로드할 때, 빈 html을 로드하게 되고\n//그런 다음에 내가 component에 작성해뒀던 것을 react가 html을 밀어넣게 됨!\n//따라서 검사 해보면 div와 h1이 있지만 소스코드(index.html)에는 존재하지 않음\n//이 것이 react가 빠른 이유, virtual이고 존재하지 않기 때문 (virtual DOM(Document Object Model))\n\n//component는 HTML을 반환하는 함수\n\n//state는 보통 우리가 동적데이터와 함께 작업할 때 만들어져, 변하는 데이터, 존재하지 않는 데이터,\n//그리고 생겨나고 그러고선 사라지고 또는 변경된 데이터, 하나인 데이터 그리고 두개가 되고 또는 0이 되는 그런 종류의 것들\n//이게 dynamic data 그리고 이런 props는 우리는 돕지않아 우리가 필요한 건 state\n\n//function component는 function이고 뭔가를 return해 그리고 screen에 표시돼, class component는 class야\n//하지만 react component로 부터 확장되고 screen에 표시돼\n\n//map은 array의 각 item에서 function을 실행하는 array를 가지는 javascript function이며\n//그 function의 result를 갖는 array를 나에게 줌\n// const friends = [\"dal\", \"mark\", \"lynn\", \"japan guy\"];\n// friends.map(function(current){\n//   console.log(current);\n//   return 0;\n// })\n//\n//result:\n// dal\n// mark\n// lynn\n// japan guy\n// [0, 0, 0, 0]\n\n//start command -> npm start\n\n//npm run build임 npm build가 아니라 \n\n//deploy가 호출될때마다 그 전에 predeploy가 호출됨 \n//업데이트를 할려면 npm i gh-pages -> npm run build -> npm run deploy를 해야한다","import React from \"react\";\nimport \"./About.css\";\n\nfunction About(props) {\n  console.log(props);\n  return (\n    <div className=\"about__container\">\n      <span>What is Movie App?</span>\n      <span>Movie App is a movie recommendation service that offers a wide variety of movies. So you don't have to think about what to watch!</span>\n    </div>\n  );\n}\n\nexport default About;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\nfunction Navigation(){\n    return (\n        <div className= \"nav\">\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n        </div>\n    );\n}\n\nexport default Navigation;","import React from \"react\";\nimport \"./Detail.css\";\n\nclass Detail extends React.Component {\n  componentDidMount() {\n    const { location, history } = this.props; //구조분해 할당으로 location, history를 얻고\n    if (location.state === undefined) { //없으면\n      history.push(\"/\"); //back\n    }\n  }\n  render() {\n    const { location } = this.props;\n    if (location.state) {\n      // return <span>{location.state.title}</span>;\n      return (\n                <div className=\"detail__container\">\n                  {/* <img src={location.state.poster} alt={location.state.title} title={location.state.title} /> */}\n                  <div className=\"detail__data\">\n                    <h3 className=\"movie__title\">{location.state.title}</h3>\n                    <h5 className=\"movie__year\">{location.state.year}</h5>\n                    <p className=\"movie__summary\">{location.state.summary}</p>\n                  </div>\n                  \n                  </div>\n             );\n      \n    } else {\n      return null;\n    }\n  }\n}\nexport default Detail;\n\n//실행 순서 render() - > componentDidMount\n\n// function Detail(location){\n//     console.log(location);\n//     return <span>hello</span>;\n// }","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\nimport Detail from \"./routes/Detail\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n//exact은 / 만 허용하겠다는 소리 exact 없으면 / something도 허용됨 \n//Navigation 안의 있는 Link는 반드시 Router안에 있어야함 \n\n//BrowserRouter를 사용해도 되지만 github page에 upload할 때, 애로사항이 많아서 HashRouter를 사용함\n//Route의 원리\n// function App(){\n//   return <HashRouter>\n//     <Route path=\"/home\">\n//       <h1>Home</h1>\n//     </Route>\n//     <Route path=\"/home/introduction\">\n//       <h1>Introduction</h1>\n//     </Route>\n//     <Route path=\"/about\">\n//       <h1>About</h1>\n//     </Route>\n//   </HashRouter>;\n// }\n\n\n//path를 선택하면 그 해당 화면을 보여주는 알고리즘 \n//꼭 path와 화면의 이름이 같을 필요는 없음","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);"],"sourceRoot":""}